class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l=0,r=nums.size()-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]>target){
                if(target < nums[l] && nums[mid] > nums[r]) l=mid+1; // 旋转点在mid右边
                else r=mid-1;
            }else{
                if(nums[r] < target && nums[mid] < nums[l]) r=mid-1; // 旋转点在mid左边
                else l=mid+1;
            }
        }
        return -1;
    }
};

class Solution1 { // 情况的判断条件麻烦一点
public:
    int search(vector<int>& nums, int target) {
        int l=0,r=nums.size()-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]>target){
                if(nums[l]>nums[r] && nums[mid]>=nums[l] && target<=nums[r]) l=mid+1; // 旋转点在mid右边
                else r=mid-1;
            }else{
                if(nums[l]>nums[r] && nums[r]>=nums[mid] && target>=nums[l]) r=mid-1; // 旋转点在mid左边
                else l=mid+1;
            }
        }
        return -1;
    }
};

class Solution2 {  // 找出正常情况
public:
    int search(vector<int>& nums, int target) {
        int l=0,r=nums.size()-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]>=nums[l]){
                if(target>=nums[l] && target<nums[mid]) r=mid-1;
                else l=mid+1;
            }else{
                if(target<=nums[r] && target>nums[mid]) l=mid+1;
                else r=mid-1;
            }
        }
        return -1;
    }
};
