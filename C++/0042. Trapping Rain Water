class Solution {
public:
    int trap(vector<int>& height) {
        const int n=height.size();
        vector<int> left(n,0),right(n,0);
        int res=0;
        for(int i=1;i<n;++i){
            left[i]=max(left[i-1],height[i-1]);
            right[n-i-1]=max(right[n-i],height[n-i]);
        }
        for(int i=0;i<n;++i){
            int h=min(left[i],right[i]);
            if(h>height[i]) res+=h-height[i];
        }
        return res;
    }
};

class Solution1 {
public:
    int trap(vector<int>& height) {
        int s = height.size();
        vector<int> maxleft(s,0),maxright(s,0);
        int max=0;
        for(int i=0;i<height.size();++i){
            if(height[i]>max){
                max=height[i];
            }
            maxleft[i]=max;
        }
        max=0;
        for(int i=height.size()-1;i>=0;--i){
            if(height[i]>max){
                max=height[i];
            }
            maxright[i]=max;
        }
        int res=0;
        for(int i=0;i<s;++i){
            res+=(min(maxleft[i],maxright[i])-height[i]);
        }
        return res;
    }
};
