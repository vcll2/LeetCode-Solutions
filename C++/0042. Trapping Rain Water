class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size(), res = 0;
        vector<int> left(height), right(height);
        for(int i = 1; i < n; ++i) {
            left[i] = max(left[i], left[i - 1]);
        }
        for(int i = n - 2; i >= 0; --i) {
            right[i] = max(right[i], right[i + 1]);
            res = res + min(left[i], right[i]);
        }
        return res;
    }
};

class Solution1 {
public:
    int trap(vector<int>& height) {
        int s = height.size();
        vector<int> maxleft(s,0),maxright(s,0);
        int max=0;
        for(int i=0;i<height.size();++i){
            if(height[i]>max){
                max=height[i];
            }
            maxleft[i]=max;
        }
        max=0;
        for(int i=height.size()-1;i>=0;--i){
            if(height[i]>max){
                max=height[i];
            }
            maxright[i]=max;
        }
        int res=0;
        for(int i=0;i<s;++i){
            res+=(min(maxleft[i],maxright[i])-height[i]);
        }
        return res;
    }
};
